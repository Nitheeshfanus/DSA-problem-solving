class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int numOfNodes = graph.length;

        int[] groupsIdsForNodes = new int[numOfNodes];
        Arrays.fill(groupsIdsForNodes, -1);

        int numOfGroups = 0;
        int currentGroupId = 0;
        //Create groupId for each node. In this graph, each node belongs to 1 and only 1 group.
        for(int currentNode=0; currentNode<numOfNodes; currentNode++){
            if(groupsIdsForNodes[currentNode]==-1){
                dfs(graph, groupsIdsForNodes, currentNode, currentGroupId);
                currentGroupId++;
                numOfGroups++;
            }
        }

        // calculate how many nodes are in each group
        int[] sizeOfGroup = new int[numOfGroups];
        for(int node=0; node<numOfNodes; node++){
            int groupId = groupsIdsForNodes[node];
            sizeOfGroup[groupId] = sizeOfGroup[groupId] + 1;
        }

        // Number of infected nodes in each group
        int[] numOfInfectedNodesInGroup = new int[numOfGroups];
        for (int infectedNode : initial) { 
            int infectedNodeGroupId = groupsIdsForNodes[infectedNode];
            numOfInfectedNodesInGroup[infectedNodeGroupId] = numOfInfectedNodesInGroup[infectedNodeGroupId] + 1;
        }

        Arrays.sort(initial);
        int bestNode = initial[0];
        int maxSaved = -1;

        for(int infectedNode : initial){
            int infectedGroupId = groupsIdsForNodes[infectedNode];
            int numOfInfectedNodesForGroupId = numOfInfectedNodesInGroup[infectedGroupId];
            if(numOfInfectedNodesForGroupId==1){
                int saved = sizeOfGroup[infectedGroupId];
                if(saved > maxSaved || (saved == maxSaved && infectedNode < bestNode)){
                    maxSaved = saved;
                    bestNode = infectedNode;
                }
            }
        }

        return bestNode;
    }

    public void dfs(int[][] graph, int[] groupIdsForNodes, int currentNode, int currentGroupId){
        groupIdsForNodes[currentNode] = currentGroupId;
        for(int neighbor=0; neighbor < graph.length; neighbor++){
            if(graph[currentNode][neighbor]==1 && groupIdsForNodes[neighbor]== -1){
                dfs(graph, groupIdsForNodes, neighbor, currentGroupId);
            }
        }
    }
}